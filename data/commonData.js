const { default: axios } = require("axios");
const { NETWORK_URL } = require("../services/xlmData");

const COIN_ISSUERS = {
  xrp: "GBXRPL45NPHCVMFFAYZVUVFFVKSIZ362ZXFP7I2ETNQ3QKZMFLPRDTD5",
  eth: "GBFXOHVAS43OIWNIO7XLRJAHT3BICFEIKOJLZVXNT572MISM4CMGSOCC",
  btc: "GDPJALI4AZKUU2W426U5WKMAT6CN3AJRPIIRYR2YM54TL2GDWO5O2MZM",
  brl: "GDVKY2GU2DRXWTBEYJJWSFXIGBZV6AZNBVVSUHEPZI54LIS6BA7DVVSP",
  usd: "GDUKMGUGDZQK6YHYA5Z6AY2G4XDSZPSZ3SW5UN3ARVMO6QSRDWP5YLEX",
  mxn: "",
  bnb: "",
  ltc: "",
};

const COIN_ISSUERS_TESTNET = {
  usd: "GC4MQOLFBOGBZ4GBNF7K7E56QUKNNX3BD4VREWMPDPHHUCABFNRS2A23",
  btc: "GDXZAO4JZ7YIBZKOJHOFWTZWMVVRYS3YSG64K5ZUFGSMGOCTZCJKVF2S",
  usdc: "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5",
};

const COIN_IDS = {
  BTC: "bitcoin",
  USD: "usd",
  ETH: "ethereum",
  ADA: "cardano",
  BNB: "binancecoin",
  USDT: "tether",
  XRP: "ripple",
  SOL: "solana",
  DOT: "polkadot",
  DOGE: "dogecoin",
  LUNA: "terra-luna",
  BCH: "bitcoin-cash",
  LTC: "litecoin",
  LINK: "chainlink",
  AVAX: "avalanche-2",
  ALGO: "algorand",
  ATOM: "cosmos",
  MATIC: "matic-network",
  FIL: "filecoin",
  IOTA: "iota",
  TRX: "tron",
  XMR: "monero",
  UNI: "uniswap",
  DAI: "dai",
  WBTC: "wrapped-bitcoin",
  EOS: "eos",
  XTZ: "tezos",
  AAVE: "aave",
  ETC: "ethereum-classic",
  COMP: "compound-governance-token",
  BSV: "bitcoin-cash-sv",
  FTM: "fantom",
  ZEC: "zcash",
  MKR: "maker",
  KSM: "kusama",
  HBAR: "hedera-hashgraph",
  OMG: "omisego",
  SNX: "synthetix-network-token",
  YFI: "yearn-finance",
  GRT: "the-graph",
  MANA: "decentraland",
  NEO: "neo",
  WAVES: "waves",
  RVN: "ravencoin",
  ENJ: "enjincoin",
  EGLD: "elrond",
  ICX: "icon",
  ONT: "ontology",
  STX: "blockstack",
  BAT: "basic-attention-token",
  CRV: "curve-dao-token",
  CRO: "crypto-com-chain",
  SUSHI: "sushi",
  LRC: "loopring",
  BAT: "basic-attention-token",
  STORJ: "storj",
  QTUM: "qtum",
  ANKR: "ankr",
  ZRX: "0x",
  NEXO: "nexo",
  BTT: "bittorrent-2",
  KAVA: "kava",
  TFUEL: "theta-fuel",
  AR: "arweave",
  CEL: "celsius-degree-token",
  DCR: "decred",
  ETC: "ethereum-classic",
  SC: "siacoin",
  VGX: "voyager-token",
  ONE: "harmony",
  CVC: "civic",
  RVN: "ravencoin",
  ARRR: "pirate-chain",
  POLY: "polymath-network",
  DGB: "digibyte",
  KMD: "komodo",
  NANO: "nano",
  HNT: "helium",
  GNT: "golem",
  DENT: "dent",
  XVG: "verge",
  WAXP: "wax",
  CHZ: "chiliz",
  REV: "revain",
  REP: "augur",
  XEM: "nem",
  MTL: "metal",
  LSK: "lisk",
  ZIL: "zilliqa",
  BCN: "bytecoin",
  MCO: "crypto-com",
  AMP: "amp",
  ARK: "ark",
  SYS: "syscoin",
  RDD: "reddcoin",
  WIN: "wink",
  BEAM: "beam",
  VET: "vechain",
  KNC: "kyber-network",
  TUSD: "true-usd",
  USDC: "usd-coin",
  BUSD: "binance-usd",
  DODO: "dodo",
  HBAR: "hedera-hashgraph",
  PAX: "paxos-standard",
  BAL: "balancer",
  UMA: "uma",
  TOMO: "tomochain",
  PAXG: "pax-gold",
  RUNE: "thorchain",
  CELO: "celo",
  SNT: "status",
  DOCK: "dock",
  LUNA: "terra",
  KIN: "kin",
  KCS: "kucoin-shares",
  STMX: "storm",
  OXT: "orchid-protocol",
  DNT: "district0x",
  QNT: "quant",
  HUSD: "husd",
  BTG: "bitcoin-gold",
  ZEN: "zencash",
  REP: "republic-protocol",
  BCPT: "blockmason-credit-protocol",
  SKL: "skale",
  BLZ: "bluzelle",
  SAN: "santiment-network-token",
  LEND: "ethlend",
  STPT: "standard-tokenization-protocol",
  REN: "republic-protocol",
  AGI: "singularitynet",
  ANT: "aragon",
  BAND: "band-protocol",
  BNT: "bancor",
  CHR: "chromia",
  COTI: "coti",
  DAI: "dai",
  DUSK: "dusk-network",
  ELF: "aelf",
  FET: "fetch-ai",
  GNO: "gnosis",
  GXS: "gxchain",
  HIVE: "hive",
  IOTX: "iotex",
  LTO: "lto-network",
  MBL: "moviebloc",
  MDT: "measurable-data-token",
  MTL: "metal",
  NKN: "nkn",
  OGN: "origin-protocol",
  OMG: "omg",
  ONG: "ontology-gas",
  PPT: "populous",
  QKC: "quarkchain",
  REQ: "request",
  RSR: "reserve-rights",
  SAND: "the-sandbox",
  SHIB: "shiba-inu",
  STORJ: "storj",
  STPT: "stp-network",
  SUN: "sun",
  SXP: "swipe",
  TCT: "tokenclub",
  TEL: "telcoin",
  THETA: "theta",
  TKO: "toko",
  TROY: "troy",
  TRB: "tellor",
  TRU: "truefi",
  TRTL: "turtlecoin",
  TRU: "trust",
  UBT: "unibright",
  UOS: "ultra",
  VGX: "voyager-token",
  WABI: "wabi",
  WAXP: "wax",
  WIN: "win",
  WRX: "wazirx",
  XLM: "stellar",
  XPR: "proton",
  XTZ: "tezos",
  YFII: "yfii",
  ZEC: "zcash",
  ZEN: "horizen",
  ZIL: "zilliqa",
  ZRX: "0x",
};

const NETWORK_TYPE = {
  TESTNET: "testnet",
  LIVENET: "public",
};

const getExchangePath = async ({
  fromCurrency,
  toCurrency,
  toIssuer,
  amount,
  fromIssuer = "",
}) => {
  try {
    let URL = "";

    if (fromCurrency === "XLM") {
      URL = `${NETWORK_URL}/paths/strict-send?source_asset_type=native&source_amount=${amount}&destination_assets=${toCurrency}:${toIssuer}`;
    } else if (toCurrency === "XLM") {
      URL = `
      ${NETWORK_URL}/paths/strict-send?source_asset_type=credit_alphanum4&source_asset_code=${fromCurrency}&source_asset_issuer=${fromIssuer}&source_amount=${amount}&destination_assets=native`;
    } else {
      URL = `${NETWORK_URL}/paths/strict-send?source_asset_type=credit_alphanum4&source_asset_code=${fromCurrency}&source_asset_issuer=${fromIssuer}&source_amount=${amount}&destination_assets=${toCurrency}:${toIssuer}
      `;
    }
    const resp = await axios.get(URL);
    if (resp && resp?.data?._embedded?.records.length)
      return resp.data._embedded.records[0];
    else return null;
  } catch (error) {
    console.log("commonData/getExchangePath:Error", error);
    return null;
  }
};

module.exports = {
  COIN_ISSUERS,
  COIN_ISSUERS_TESTNET,
  COIN_IDS,
  NETWORK_TYPE,
  getExchangePath,
};
